<?php
$serveradress = variable_get("ddb_pdc_serveradress", 'http://localhost:8080');
define("PDC_SERVERADRESS", $serveradress);

function ddb_pdc_menu() {
  $items = array();
  
  $items['public-domain-calculator'] = array( // creates a link for the PDC search form
    'title' => 'Public Domain Calculator', // page title
    'description' => 'Deutsche Digitale Bibliothek - Public Domain Calculator', // page description
    'page callback' => 'drupal_get_form', // function that creates a (form) content for this page
    'page arguments' => array('ddb_pdc_form'), // function that provides input for the drupal_get_form function - eg. drupal_get_form(ddb_pdc_form);
    'menu_name' => 'main-menu', // remove this line, to add the link to the Navigation menu
    'access callback' => TRUE // permission
    );
  
  $items['search-results/%'] = // % will be replaced by page arguments
  array(
    'page callback' => 'ddb_pdc_search_results',
    'access callback' => TRUE,
    'page arguments' => array(1),
    'type' => MENU_CALLBACK
    );
  
  $items['pdc-result/%'] = // % will be replaced by page arguments
  array(
    'title' => 'Resultat der Evaluierung',
    'page callback' => 'ddb_pdc_result',
    'access callback' => TRUE,
    'page arguments' => array(1),
    'type' => MENU_CALLBACK
    );
  
  $items['admin/config/ddb_pdc'] = array(
    'title' => 'DDB-PDC Konfiguration',
    'description' => 'Bitte geben Sie hier die Serveradresse mit dem Port zum Public Domain Calculator ein.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ddb_pdc_admin'),
    'access arguments' => array('administer ddb_pdc settings'),
    'type' => MENU_NORMAL_ITEM
    );
  
  return $items;
}

function ddb_pdc_form($form, &$form_state, $vars = "") {
  $form = array();
  $form['#redirect'] = 'public-domain-calculator-results';

  $form['ddb_title'] = array(
    '#type' => 'textfield',
    '#label' => 'Geben Sie hier den Titel ein!',
    '#default_value' => $vars,
    '#required' => TRUE
    );

  $form['submit_button'] = array(
    '#type' => 'submit',
    '#value' => t('Suche')
    );

  return $form;
}

function ddb_pdc_form_validate($form, &$form_state) {
  if (empty($form_state['values']['ddb_title'])) {
    form_error($form, t('Bitte geben Sie einen Suchbegriff ein!'));
  }
}

function ddb_pdc_form_submit($form, &$form_state) {

  $input = $form_state['values']['ddb_title'];
  
  $regexDDBID = '/^[A-Z0-9]+$/';
  if (preg_match($regexDDBID, $input)) {
    drupal_goto('pdc-result/' . $input);
  } else {
    $options = array(
      'query' => array(
        'start' => '0',
        'max' => '10',
        'page' => '1',
        'limit' => '10'
        )
      );
    drupal_goto('search-results/' . $input, $options);
  }
}

function ddb_pdc_search_results($searchterm) {
  
  $module_path = drupal_get_path('module', 'ddb_pdc');
  $imagespath  = base_path() . $module_path . '/images/';
  
  $start = $_GET['start'];
  $max   = $_GET['max'];

  $form       = drupal_get_form('ddb_pdc_form', $searchterm);
  $searchform = drupal_render($form);

  $ddbsearchresults = ddb_pdc_http_request('/search', array('q' => $searchterm, 'start' => $start, 'max' => $max)); // HTTP Request to the PDC with the searchterm
    //var_dump($ddbsearchresults);
  $json_searchresults = json_decode($ddbsearchresults->data); // Get json data from the request and decode it
  
  switch ($ddbsearchresults->code) {
    case "500":
    return theme('search-results', array(
      'searchform' => $searchform,
      'error_message' => 'Es ist leider ein Fehler aufgetreten. Bitte überprüfen Sie Ihre Eingabe!'
      ));
    break;
    
    case "200":
    $ddbResultsAmount = $json_searchresults->maxSearchResults;
    $ddbItems = $json_searchresults->ddbItems;
    $pagination       = "";
    $pagination .= theme('pagination', array(
      'searchterm' => $searchterm,
      'imagespath' => $imagespath,
      'ddbResultsAmount' => $ddbResultsAmount
      ));
    
    if ($ddbResultsAmount == 0) {
      return theme('search-results', array(
        'searchform' => $searchform,
        'error_message' => 'Ihre Suche ergab leider keine Treffer. Bitte überprüfen Sie Ihre Eingabe!'
        ));
      break;
    } else {
      
      return theme('search-results', array(
        'searchterm' => $searchterm,
        'searchform' => $searchform,
        'imagespath' => $imagespath,
        'ddbItems' => $ddbItems,
        'pagination' => $pagination
        ));
      break;
    }

    case -10061:
    return theme('search-results', array(
      'searchform' => $searchform,
      'error_message' => 'Es konnte leider keine Verbindung mit dem Server hergestellt werden.'
      ));
    break;
    
    default:
    return theme('search-results', array(
      'searchform' => $searchform
      ));
  }
}

function ddb_pdc_result($ddbid) {
  
  $module_path = drupal_get_path('module', 'ddb_pdc');
  $imagespath  = base_path() . $module_path . '/images/';
  
  $pdcresult   = ddb_pdc_http_request('/pdc/' . $ddbid); // HTTP Request to the PDC with the DDB ID

  $json_pdcresult = json_decode($pdcresult->data);

  $imageURL = $json_pdcresult->imageUrl;
  $title    = $json_pdcresult->title;
  $subtitle = $json_pdcresult->subtitle;
  
  $form       = drupal_get_form('ddb_pdc_form');
  $searchform = drupal_render($form);

  if (is_null($json_pdcresult->publicDomain)){
    $publicdomain     = "unknownpublicdomain";
    $publicdomainText = "Ergebnis konnte nicht<br>ermittelt werden.";
  } else{
    switch ($json_pdcresult->publicDomain) {
      case false:
      $publicdomain     = "notpublicdomain";
      $publicdomainText = "urheberrechtlich geschützt";
      break;
      
      case true:
      $publicdomain     = "publicdomain";
      $publicdomainText = "Öffentlich zugänglich";
      break;
    }
  }
  
  $generalAssumptions = array();
  $resultTrace = array();
  
  foreach ($json_pdcresult->trace as $question){
    if($question->answer == "assumed yes"){
      $generalAssumptions[] = array("question" => $question->question, "answer" => $question->answer, "notes" => $question->note,
        "questionResult" => "positiveAssumed", "questionResultTrace" => "Ja (Annahme)");
    } elseif($question->answer == "assumed no"){
      $generalAssumptions[] = array("question" => $question->question, "answer" => $question->answer, "notes" => $question->note,
        "questionResult" => "negativeAssumed", "questionResultTrace" => "Nein (Annahme)");
    } elseif($question->answer == "yes"){
      $resultTrace[] = array("question" => $question->question, "answer" => $question->answer, "notes" => $question->note,
        "questionResult" => "positive", "questionResultTrace" => "Ja");
    } elseif($question->answer == "no"){
      $resultTrace[] = array("question" => $question->question, "answer" => $question->answer, "notes" => $question->note,
        "questionResult" => "negative", "questionResultTrace" => "Nein");
    } elseif($question->answer == "unknown"){
      $resultTrace[] = array("question" => $question->question, "answer" => $question->answer, "notes" => $question->note,
        "questionResult" => "unknown", "questionResultTrace" => "Unbekannt");
    }
  }
  
  switch ($pdcresult->code) {
    case "500":
    return theme('pdc_result', array(
      'searchform' => $searchform,
      'error_message' => 'Unter der angegebenen ID wurden keine Ergebnisse gefunden. Bitte überprüfen Sie Ihre Eingabe!'
      ));
    break;
    
    case "200":
    return theme('pdc_result', array(
      'title' => $title,
      'subtitle' => $subtitle,
      'imageURL' => $imageURL,
      'imagespath' => $imagespath,
      'publicdomain' => $publicdomain,
      'publicdomainText' => $publicdomainText,
      'generalAssumptions' => $generalAssumptions,
      'resultTrace' => $resultTrace
      ));
    break;
    
    case -10061:
    return theme('pdc_result', array(
      'searchform' => $searchform,
      'error_message' => 'Es konnte leider keine Verbindung mit dem Server hergestellt werden.'
      ));
    break;
    
    default:
    return theme('pdc_result', array(
      'searchform' => $searchform
      ));
  }
}

function ddb_pdc_theme() {
  return array(
    'search-results' => array(
      'variables' => array(
        'searchterm' => NULL,
        'searchform' => NULL,
        'imagespath' => NULL,
        'ddbItems' => NULL,
        'error_message' => NULL,
        'pagination' => NULL
        ),
      'render element' => 'element',
      'template' => 'templates/search-results'
      ),
    'pdc_result' => array(
      'variables' => array(
        'title' => NULL,
        'subtitle' => NULL,
        'imageURL' => NULL,
        'imagespath' => NULL,
        'publicdomain' => NULL,
        'publicdomainText' => NULL,
        'generalAssumptions' => NULL,
        'resultTrace' => NULL
        ),
      'render element' => 'element',
      'template' => 'templates/pdc-result'
      ),
    'pagination' => array(
      'variables' => array(
        'searchterm' => NULL,
        'imagespath' => NULL,
        'ddbResultsAmount' => NULL
        ),
      'template' => 'templates/pagination'
      )
    );
}

function ddb_pdc_preprocess_pdc_result() {
  
  drupal_add_library('system', 'ui.accordion');
  drupal_add_js('jQuery(document).ready(function() {jQuery("#accordion").accordion(
    {collapsible: true,active: false,heightStyle: "content",autoHeight: false,clearStyle: true});});', 'inline');
}

function ddb_pdc_http_request($path, $query_params = NULL) {
  $url = PDC_SERVERADRESS . $path;
  if ($query_params) {
    $url .= '?' . drupal_http_build_query($query_params);
  }
  return drupal_http_request($url);
}

function ddb_pdc_admin() {
  
  $form = array();
  
  $form['ddb_pdc_serveradress'] = array(
    '#type' => 'textfield',
    '#title' => t('Serveradress'),
    '#default_value' => variable_get('ddb_pdc_serveradress', 'http://localhost:8080'),
    '#description' => t("Serveradress, like http://localhost:8080"),
    '#required' => TRUE
    );

  return system_settings_form($form);
}